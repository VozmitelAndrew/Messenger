services:
  discovery-service:
    build:
      context: ./Discovery
      dockerfile: Dockerfile
    image: discovery-service:latest  # Укажите свой образ для config-service
    container_name: discovery-service
    # Путь к директории с Dockerfile для config-service
    ports:
      - "8761:8761"  # Порт, на котором будет работать config-service
    networks:
      - messenger-network


  config-service:
    build:
      context: ./Configuration
      dockerfile: Dockerfile
    image: config-service:latest  # Укажите свой образ для config-client-1
    container_name: config-service
    ports:
      - "8000:8000"  # Порт, на котором будет работать config-client-1
    depends_on:
      - discovery-service
    networks:
      - messenger-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://config-service:8000/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 10


  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - messenger-network


  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - messenger-network


  gateway:
    build:
      context: ./Gateway
      dockerfile: Dockerfile
    image: gateway:latest  # Укажите свой образ для config-client-1
    container_name: gateway
    ports:
      - "8080:8080"  # Порт, на котором будет работать config-client-1
    depends_on:
      config-service:
        condition: service_healthy
    networks:
      - messenger-network
    command: /bin/sh -c "env && sleep 10 && java -jar /app/app.jar"  # Задержка перед запуском клиента


  chat-service:
    build:
      context: ./ChatService
      dockerfile: Dockerfile
    image: chat-service:latest
    container_name: chat-service
    ports:
      - "8082:8082"
    depends_on:
      postgres:
        condition: service_started
      config-service:
        condition: service_healthy
    networks:
      - messenger-network
    command: /bin/sh -c "env && sleep 10 && java -jar /app/app.jar"


  user-service:
    build:
      context: ./UserService
      dockerfile: Dockerfile
    image: user-service:latest
    container_name: user-service
    ports:
      - "8083:8083"
    depends_on:
      postgres:
        condition: service_started
      config-service:
        condition: service_healthy
    networks:
      - messenger-network
    command: /bin/sh -c "env && sleep 10 && java -jar /app/app.jar"


  message-handler-service:
    build:
      context: ./MessageHandler
      dockerfile: Dockerfile
    image: message-handler-service:latest
    container_name: message-handler-service
    ports:
      - "8091:8091"
    depends_on:
      kafka:
        condition: service_started
      mongodb:
        condition: service_started
      config-service:
        condition: service_healthy
    networks:
      - messenger-network
    command: /bin/sh -c "env && sleep 10 && java -jar /app/app.jar"


  websocket-service:
    build:
      context: ./WebSocket
      dockerfile: Dockerfile
    image: websocket-service:latest
    container_name: websocket-service

    ports:
      - "8092:8092"
    depends_on:
      config-service:
        condition: service_healthy
      redis:
        condition: service_started
      kafka:
        condition: service_started
    networks:
      - messenger-network
    command: /bin/sh -c "env && sleep 10 && java -jar /app/app.jar"


  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"  # Хост:контейнер
    volumes:
      - redis_data:/data
    networks:
      - messenger-network


  mongodb:
    image: mongo:latest
    container_name: mongodb
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_DATABASE: messenger
      MONGO_INITDB_ROOT_USERNAME: username
      MONGO_INITDB_ROOT_PASSWORD: password
    volumes:
      - mongodb_data:/data/db


  authentication-service:
    build:
      context: ./Authentication
      dockerfile: Dockerfile
    image: authentication-service:latest  # Укажите свой образ для config-client-1
    container_name: authentication-service

    ports:
      - "8090:8090"  # Порт, на котором будет работать config-client-1
    depends_on:
      config-service:
        condition: service_healthy
      postgres:
        condition: service_started
      redis:
        condition: service_started
    networks:
      - messenger-network
    command: /bin/sh -c "env && sleep 10 && java -jar /app/app.jar"


  postgres:
    image: postgres:latest
    container_name: postgres-db
    environment:
      POSTGRES_USER: username
      POSTGRES_PASSWORD: password
      POSTGRES_DB: postgres_database

    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - messenger-network


  presence-service:
    build:
      context: ./Presence
      dockerfile: Dockerfile
    image: presence-service:latest  # Укажите свой образ для config-client-1
    container_name: presence-service

    ports:
      - "8093:8093"  # Порт, на котором будет работать config-client-1
    depends_on:
      config-service:
        condition: service_healthy
      redis:
        condition: service_started
      kafka:
        condition: service_started
    networks:
      - messenger-network
    command: /bin/sh -c "env && sleep 10 && java -jar /app/app.jar"


volumes:
  postgres_data:
  redis_data:
  mongodb_data:

networks:
  messenger-network:
    driver: bridge