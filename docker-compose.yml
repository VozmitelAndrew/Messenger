services:
  discovery-service:
    image: discovery-service:latest  # Укажите свой образ для config-service
    container_name: discovery-service
    # Путь к директории с Dockerfile для config-service
    ports:
      - "8761:8761"  # Порт, на котором будет работать config-service
    networks:
      - messenger-network

  config-service:
    image: config-service:latest  # Укажите свой образ для config-client-1
    container_name: config-service

    ports:
      - "8000:8000"  # Порт, на котором будет работать config-client-1
    depends_on:
      - discovery-service
    networks:
      - messenger-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://config-service:8000/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 10

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"


  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - 29092:29092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  gateway:
    image: gateway:latest  # Укажите свой образ для config-client-1
    container_name: gateway

    ports:
      - "8080:8080"  # Порт, на котором будет работать config-client-1
    depends_on:
      config-service:
        condition: service_healthy
    networks:
      - messenger-network
    command: /bin/sh -c "env && sleep 10 && java -jar /app/app.jar"  # Задержка перед запуском клиента


  message-handler-service:
    image: message-handler-service:latest
    container_name: message-handler-service

    ports:
      - "8091:8091"
    depends_on:
      config-service:
        condition: service_healthy
    networks:
      - messenger-network
    command: /bin/sh -c "env && sleep 10 && java -jar /app/app.jar"


  websocket-service:
    image: websocket-service:latest
    container_name: websocket-handler-service

    ports:
      - "8092:8092"
    depends_on:
      config-service:
        condition: service_healthy
    networks:
      - messenger-network
    command: /bin/sh -c "env && sleep 10 && java -jar /app/app.jar"


  authentication-service:
    image: authentication-service:latest  # Укажите свой образ для config-client-1
    container_name: authentication-service

    ports:
      - "8090:8090"  # Порт, на котором будет работать config-client-1
    depends_on:
      config-service:
        condition: service_healthy
      authentication-postgres:
        condition: service_started
      authentication-redis:
        condition: service_started
    networks:
      - messenger-network
    command: /bin/sh -c "env && sleep 10 && java -jar /app/app.jar"


  authentication-postgres:
    image: postgres:latest
    container_name: postgres_db
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: password_database
    ports:
      - "5432:5432"
    volumes:
      - authentication_postgres_data:/var/lib/postgresql/data
    networks:
      - messenger-network


  authentication-redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - authentication_redis_data:/data
    networks:
      - messenger-network

volumes:
  authentication_postgres_data:
  authentication_redis_data:

networks:
  messenger-network:
    driver: bridge